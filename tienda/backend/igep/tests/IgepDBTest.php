<?php
/**
 * Test class for IgepDB.
 * Generated by PHPUnit on 2008-02-11 at 13:00:18.
 */
class IgepDBTest extends PHPUnit_Framework_TestCase {

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    /**
     * @todo Implement testPreConexion().
     */
    public function testPreConexion() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPostConexion().
     */
    public function testPostConexion() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testCaracteresNumericos().
     */
    public function testCaracteresNumericos() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMascaraFechas().
     */
    public function testMascaraFechas() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testSupportedDBMS() {
		$dbs = IgepDB::supportedDBMS();
        $this->assertInternalType('array', $dbs);
        $this->assertTrue(count($dbs) > 0,'lista de dbms soportados vacia');
		foreach ($dbs as $db)
	        $this->assertTrue(!empty($db),'entrada vacia');
    }

    /**
     * @todo Implement testEmpezarTransaccion().
     */
    public function testEmpezarTransaccion() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testAcabarTransaccion().
     */
    public function testAcabarTransaccion() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testObtenerDBMS() {
		$dbs = IgepDB::supportedDBMS();
		foreach($dbs as $db)
	        IgepDB::obtenerDBMS(array('phptype'=>$db));
	    try {
	        IgepDB::obtenerDBMS(array('phptype'=>'noexistente'));
	    } catch (Exception $expected) {
			return;
		}
        $this->fail('con dbms invalido');
	    
    }

    /**
     * @todo Implement testCreaDBMS().
     */
    public function testCreaDBMS() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testObtenerLimit().
     */
    public function testObtenerLimit() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testObtenerSecuenciaBD().
     */
    public function testObtenerSecuenciaBD() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testUnDiacritic().
     */
    public function testUnDiacritic() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}

?>

<?php
/**
 * Test class for AutoLoad.
 * Generated by PHPUnit on 2007-10-01 at 13:25:13.
 */
class GVHAutoLoadTest extends PHPUnit_Framework_TestCase {

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
       $this->obj = GVHAutoLoad::singleton();
     }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    /**
     * @todo Implement testSingleton().
     * faltaria controlar que el new AutoLoad no se puede usar
     */
    public function testSingleton() {
        $b = GVHAutoLoad::singleton();
        $this->assertTrue($b === $this->obj);
    }

    /**
     * Se comprueba que no se puede clonar la instancia de AutoLoad
     */
    public function test__clone() {
        try {
	        $clon = clone $this->obj;
        } catch (Exception $e) {
        	// correcto
        	return;
        }
        $this->fail();
    }

    /**
     * 
     */
    public function testRegisterClass() {
    	$cont = count($this->obj->clases);
    	$this->obj->registerClass('','ruta');
        $this->assertTrue($cont == count($this->obj->clases));    	
    	$this->obj->registerClass(null,'ruta');
        $this->assertTrue($cont == count($this->obj->clases));    	
    	$this->obj->registerClass('clase','');
        $this->assertTrue($cont == count($this->obj->clases));    	
    	$this->obj->registerClass('clase',null);
        $this->assertTrue($cont == count($this->obj->clases));    	
    	$this->obj->registerClass('ConfigFramework','igep/ConfigFramework.php');
        $this->assertTrue($cont + 1 == count($this->obj->clases));    	
    	$this->obj->registerClass('gvHidraMaps','igep/include/gvHidraMaps.php');
        $this->assertTrue($cont + 2 == count($this->obj->clases));    	
    	$this->obj->registerClass('gvHidraMaps','igep/include/gvHidraMaps.php');
        $this->assertTrue($cont + 2 == count($this->obj->clases),'se duplican clases');    	
    }

    /**
     * 
     */
    public function testRegisterFolder() {
    	$cont = count($this->obj->dirs);
    	$this->obj->registerFolder('');
        $this->assertEquals($cont, count($this->obj->dirs));    	
    	$this->obj->registerFolder(null);
        $this->assertEquals($cont, count($this->obj->dirs));    	
    	// pongo una carpeta que existe para que no fallen otros tests
    	$this->obj->registerFolder('views');
        $this->assertEquals($cont+1, count($this->obj->dirs));    	
    	$this->obj->registerFolder('views');
        $this->assertEquals($cont+1, count($this->obj->dirs),'se duplican directorios');    	
    	$this->obj->registerFolder('actions');
        $this->assertEquals($cont+2, count($this->obj->dirs));    	
    }

    /**
     * 
     */
    public function testAuto_load() {
        foreach ($this->obj->clases as $clase => $ruta) {
        	if (strpos($ruta,'/')!==false) 
        		$this->assertFileExists($ruta, "ruta $ruta no existe");
			//$this->obj->auto_load($clase ); class_exists por defecto llama a autoload
			$this->assertTrue(class_exists($clase) or interface_exists($clase),'Cargando clase '.$clase);  
        }
        foreach ($this->obj->dirs as $dir) {
        	$this->assertFileExists($dir, "carpeta $dir no existe");
        }
    }
}

?>

<?php
/**
 * Test class for ConfigFramework.
 * Generated by PHPUnit on 2009-05-12 at 16:51:09.
 */
class ConfigFrameworkTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    ConfigFramework
     * @access protected
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        $this->object = ConfigFramework::getConfig();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement test__destruct().
     */
    public function test__destruct() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetConfig().
     */
    public function testGetConfig() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetCustomDirName().
     */
    public function testGetCustomDirName() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetApplicationName().
     */
    public function testGetApplicationName() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetAppVersion().
     */
    public function testGetAppVersion() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetAppVersion().
     */
    public function testSetAppVersion() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetCustomTitle().
     */
    public function testGetCustomTitle() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetCustomTitle().
     */
    public function testSetCustomTitle() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetLogStatus().
     */
    public function testGetLogStatus() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetLogStatus().
     */
    public function testSetLogStatus() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetQueryMode().
     */
    public function testGetQueryMode() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetQueryMode().
     */
    public function testSetQueryMode() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetTemplatesCompilationDir().
     */
    public function testGetTemplatesCompilationDir() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetTemplatesCompilationDir().
     */
    public function testSetTemplatesCompilationDir() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetDefList().
     */
    public function testSetDefList() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetDefList().
     */
    public function testGetDefList() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetListKeys().
     */
    public function testGetListKeys() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetDefVS().
     */
    public function testSetDefVS() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetDefVS().
     */
    public function testGetDefVS() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetVSKeys().
     */
    public function testGetVSKeys() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetDSN().
     */
    public function testSetDSN() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetDSN().
     */
    public function testGetDSN() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    public function testGetNumericSeparatorsFW() {
		$cars = ConfigFramework::getNumericSeparatorsFW();
		$this->assertTrue(array_key_exists('DECIMAL',$cars),'No existe indice DECIMAL');
		$this->assertTrue(isset($cars['DECIMAL']) and strlen($cars['DECIMAL'])==1,'valor incorrecto como separador decimal');
		$this->assertTrue(array_key_exists('GROUP',$cars),'No existe indice GROUP');
		$this->assertTrue(isset($cars['GROUP']),'valor incorrecto como separador de miles');
    }

    public function testGetNumericSeparatorsUser() {
		$cars = ConfigFramework::getNumericSeparatorsUser();
		$this->assertTrue(array_key_exists('DECIMAL',$cars),'No existe indice DECIMAL');
		$this->assertTrue(isset($cars['DECIMAL']) and strlen($cars['DECIMAL'])==1,'valor incorrecto como separador decimal');
		$this->assertTrue(array_key_exists('GROUP',$cars),'No existe indice GROUP');
		$this->assertTrue(isset($cars['GROUP']) and strlen($cars['GROUP'])==1,'valor incorrecto como separador de miles');
    }

    public function testGetDateMaskFW() {
		$masc = ConfigFramework::getDateMaskFW();
		$this->assertInternalType('string', $masc);
		$this->assertFalse(empty($masc),'no tiene valor');
    }

    public function testGetDateMaskUser() {
		$masc = ConfigFramework::getDateMaskUser();
		$this->assertInternalType('string', $masc);
		$this->assertTrue(!empty($masc),'no tiene valor');
		$this->assertEquals(strlen($masc), 5, 'longitud de mascara incorrecta');
		$this->assertEquals(substr($masc,1,1), substr($masc,3,1), 'usando dos caracteres separadores');
		$letras = array('d','m','Y','j','n');
		$this->assertTrue(in_array(substr($masc,0,1),$letras), "no soportado caracter de formato en posicion 1: ".substr($masc,0,1));
		$this->assertTrue(in_array(substr($masc,2,1),$letras), "no soportado caracter de formato en posicion 2: ".substr($masc,2,1));
		$this->assertTrue(in_array(substr($masc,4,1),$letras), "no soportado caracter de formato en posicion 3: ".substr($masc,4,1));
    }

}

?>
